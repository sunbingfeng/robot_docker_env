#!/usr/bin/env python3

import os
import argparse
import subprocess
import docker_utils as ut
import yaml


def run_dev_environment(config_file, img):
    with open(config_file, "r") as f:
        config = yaml.safe_load(f)
        tag = config["tag"]
        abs_volumes = config['absolute_volumes']
        rel_volumes = config['relative_volumes']
        command = config['cmd']

    user = ut.get_user()
    docker_args = []
    dockerfile = img

    # Workspace name
    ws_name = "workspace"

    docker_args.append("-it")
    docker_args.append("--rm")
    docker_args.append("--detach-keys=\"ctrl-p,d\"")
    docker_args.append("--user {0}:{0}".format(ut.get_uid()))
    docker_args.append("--env=\"DISPLAY\"")
    docker_args.append("--name=\"{}\"".format(img))
    docker_args.append("--privileged")
    docker_args.append("--network=\"host\"")

    # Mount devices
    docker_args.append(
        "-v /dev:/dev --device-cgroup-rule='c 188:* rmw' --device-cgroup-rule='c 81:* rmw'"
    )

    # Mount workspace
    for v in abs_volumes:
        docker_args.append("--volume {}".format(v))

    dir_name = os.path.dirname(os.path.abspath(config_file))
    target_usr_home = "/home/{}".format(user)
    for rv in rel_volumes:
        v = os.path.join(dir_name, rv)
        v = v.replace("~", target_usr_home)
        docker_args.append("--volume {}".format(v))

    docker_args.append("-e ROS_HOSTNAME=localhost")
    docker_args.append("-e ROS_MASTER_URI=http://localhost:11311")
    docker_args.append("--workdir /home/{}/{}/".format(user, ws_name))

    # if ut.is_nvidia():
    #     docker_args.append("--runtime=\"nvidia\"")
    #     dockerfile += "_nvidia"

    # Join arguments together separated by a space
    docker_args = ' '.join(docker_args)
    docker_command = "docker run {} {} {}".format(docker_args, dockerfile,
                                                  command)

    print(docker_command)

    ut.run_command("xhost +local:root")
    ut.run_command(docker_command)
    ut.run_command("xhost -local:root")


def attach_dev_environment(img):
    command = 'docker exec -it --user {0}:{0} {1}'.format(ut.get_uid(), img)
    ut.run_command(command)


def is_running(img):
    command = 'docker ps | grep {} > /dev/null'.format(img)
    try:
        subprocess.check_call(command, shell=True)
    except Exception:
        return False

    return True


def main():
    # Parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', default='./config/meta.yaml')
    parser.add_argument('-i', '--image', default="bill-dev")
    args = parser.parse_args()

    if not is_running(args.image):
        print('fresh launch.')
        run_dev_environment(args.config, args.image)
    else:
        print('attach to existed container')
        attach_dev_environment(args.image)


if __name__ == '__main__':
    main()
